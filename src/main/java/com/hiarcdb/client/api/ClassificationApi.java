/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hiarcdb.client.model.Classification;
import com.hiarcdb.client.model.CreateClassificationRequest;
import com.hiarcdb.client.model.CreateOrUpdateEntityRequest;
import com.hiarcdb.client.model.FindClassificationsRequest;
import com.hiarcdb.client.model.FindEntityRequest;
import com.hiarcdb.client.model.UpdateClassificationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassificationApi {
    private ApiClient localVarApiClient;

    public ClassificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createClassification
     * @param createClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassificationCall(CreateClassificationRequest createClassificationRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createClassificationRequest;

        // create path and map variables
        String localVarPath = "/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClassificationValidateBeforeCall(CreateClassificationRequest createClassificationRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createClassificationRequest' is set
        if (createClassificationRequest == null) {
            throw new ApiException("Missing the required parameter 'createClassificationRequest' when calling createClassification(Async)");
        }
        

        okhttp3.Call localVarCall = createClassificationCall(createClassificationRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Create a Classification
     * 
     * @param createClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Classification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public Classification createClassification(CreateClassificationRequest createClassificationRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Classification> localVarResp = createClassificationWithHttpInfo(createClassificationRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Create a Classification
     * 
     * @param createClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Classification> createClassificationWithHttpInfo(CreateClassificationRequest createClassificationRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = createClassificationValidateBeforeCall(createClassificationRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Classification (asynchronously)
     * 
     * @param createClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassificationAsync(CreateClassificationRequest createClassificationRequest, String xHiarcUserKey, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClassificationValidateBeforeCall(createClassificationRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClassification
     * @param key Key of Classification to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClassificationCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classifications/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClassificationValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteClassification(Async)");
        }
        

        okhttp3.Call localVarCall = deleteClassificationCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Delete a Classification
     * 
     * @param key Key of Classification to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteClassification(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = deleteClassificationWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Delete a Classification
     * 
     * @param key Key of Classification to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteClassificationWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = deleteClassificationValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Classification (asynchronously)
     * 
     * @param key Key of Classification to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClassificationAsync(String key, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClassificationValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findClassification
     * @param findClassificationsRequest Classification query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findClassificationCall(FindClassificationsRequest findClassificationsRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findClassificationsRequest;

        // create path and map variables
        String localVarPath = "/classifications/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findClassificationValidateBeforeCall(FindClassificationsRequest findClassificationsRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'findClassificationsRequest' is set
        if (findClassificationsRequest == null) {
            throw new ApiException("Missing the required parameter 'findClassificationsRequest' when calling findClassification(Async)");
        }
        

        okhttp3.Call localVarCall = findClassificationCall(findClassificationsRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Find a Classification
     * 
     * @param findClassificationsRequest Classification query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Classification> findClassification(FindClassificationsRequest findClassificationsRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Classification>> localVarResp = findClassificationWithHttpInfo(findClassificationsRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Find a Classification
     * 
     * @param findClassificationsRequest Classification query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Classification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Classification>> findClassificationWithHttpInfo(FindClassificationsRequest findClassificationsRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = findClassificationValidateBeforeCall(findClassificationsRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a Classification (asynchronously)
     * 
     * @param findClassificationsRequest Classification query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findClassificationAsync(FindClassificationsRequest findClassificationsRequest, String xHiarcUserKey, final ApiCallback<List<Classification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findClassificationValidateBeforeCall(findClassificationsRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllClassifications
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllClassificationsCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllClassificationsValidateBeforeCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllClassificationsCall(xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get all Classifications
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Classification> getAllClassifications(String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Classification>> localVarResp = getAllClassificationsWithHttpInfo(xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get all Classifications
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Classification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Classification>> getAllClassificationsWithHttpInfo(String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getAllClassificationsValidateBeforeCall(xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Classifications (asynchronously)
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Classification objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllClassificationsAsync(String xHiarcUserKey, final ApiCallback<List<Classification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllClassificationsValidateBeforeCall(xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassification
     * @param key Key of Classification to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassificationCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classifications/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassificationValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getClassification(Async)");
        }
        

        okhttp3.Call localVarCall = getClassificationCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Classification&#39;s Info
     * 
     * @param key Key of Classification to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Classification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public Classification getClassification(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<Classification> localVarResp = getClassificationWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a Classification&#39;s Info
     * 
     * @param key Key of Classification to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Classification> getClassificationWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getClassificationValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Classification&#39;s Info (asynchronously)
     * 
     * @param key Key of Classification to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassificationAsync(String key, String xHiarcUserKey, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassificationValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClassification
     * @param key Key of Classification to get info (required)
     * @param updateClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassificationCall(String key, UpdateClassificationRequest updateClassificationRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateClassificationRequest;

        // create path and map variables
        String localVarPath = "/classifications/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClassificationValidateBeforeCall(String key, UpdateClassificationRequest updateClassificationRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateClassification(Async)");
        }
        
        // verify the required parameter 'updateClassificationRequest' is set
        if (updateClassificationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClassificationRequest' when calling updateClassification(Async)");
        }
        

        okhttp3.Call localVarCall = updateClassificationCall(key, updateClassificationRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Update a Classification
     * 
     * @param key Key of Classification to get info (required)
     * @param updateClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Classification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public Classification updateClassification(String key, UpdateClassificationRequest updateClassificationRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Classification> localVarResp = updateClassificationWithHttpInfo(key, updateClassificationRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Update a Classification
     * 
     * @param key Key of Classification to get info (required)
     * @param updateClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Classification> updateClassificationWithHttpInfo(String key, UpdateClassificationRequest updateClassificationRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = updateClassificationValidateBeforeCall(key, updateClassificationRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Classification (asynchronously)
     * 
     * @param key Key of Classification to get info (required)
     * @param updateClassificationRequest Classification information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Classification object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassificationAsync(String key, UpdateClassificationRequest updateClassificationRequest, String xHiarcUserKey, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClassificationValidateBeforeCall(key, updateClassificationRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
