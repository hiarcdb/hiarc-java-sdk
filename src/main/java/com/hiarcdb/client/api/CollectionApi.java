/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.hiarcdb.client.model.AddFileToCollectionRequest;
import com.hiarcdb.client.model.AddGroupToCollectionRequest;
import com.hiarcdb.client.model.AddUserToCollectionRequest;
import com.hiarcdb.client.model.Collection;
import com.hiarcdb.client.model.CollectionItems;
import com.hiarcdb.client.model.CreateCollectionRequest;
import com.hiarcdb.client.model.CreateOrUpdateEntityRequest;
import com.hiarcdb.client.model.FindCollectionsRequest;
import com.hiarcdb.client.model.FindEntityRequest;
import com.hiarcdb.client.model.HiarcFile;
import com.hiarcdb.client.model.UpdateCollectionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionApi {
    private ApiClient localVarApiClient;

    public CollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addChildToCollection
     * @param key Key of Collection (required)
     * @param childKey Key of item to add as child to Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToCollectionCall(String key, String childKey, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}/children/{childKey}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "childKey" + "\\}", localVarApiClient.escapeString(childKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChildToCollectionValidateBeforeCall(String key, String childKey, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addChildToCollection(Async)");
        }
        
        // verify the required parameter 'childKey' is set
        if (childKey == null) {
            throw new ApiException("Missing the required parameter 'childKey' when calling addChildToCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addChildToCollectionCall(key, childKey, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a child item to a Collection
     * 
     * @param key Key of Collection (required)
     * @param childKey Key of item to add as child to Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addChildToCollection(String key, String childKey, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addChildToCollectionWithHttpInfo(key, childKey, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a child item to a Collection
     * 
     * @param key Key of Collection (required)
     * @param childKey Key of item to add as child to Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addChildToCollectionWithHttpInfo(String key, String childKey, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addChildToCollectionValidateBeforeCall(key, childKey, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a child item to a Collection (asynchronously)
     * 
     * @param key Key of Collection (required)
     * @param childKey Key of item to add as child to Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToCollectionAsync(String key, String childKey, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChildToCollectionValidateBeforeCall(key, childKey, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFileToCollection
     * @param key Key of Collection (required)
     * @param addFileToCollectionRequest Add File request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileToCollectionCall(String key, AddFileToCollectionRequest addFileToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addFileToCollectionRequest;

        // create path and map variables
        String localVarPath = "/collections/{key}/files"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFileToCollectionValidateBeforeCall(String key, AddFileToCollectionRequest addFileToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addFileToCollection(Async)");
        }
        
        // verify the required parameter 'addFileToCollectionRequest' is set
        if (addFileToCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'addFileToCollectionRequest' when calling addFileToCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addFileToCollectionCall(key, addFileToCollectionRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a File to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addFileToCollectionRequest Add File request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addFileToCollection(String key, AddFileToCollectionRequest addFileToCollectionRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addFileToCollectionWithHttpInfo(key, addFileToCollectionRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a File to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addFileToCollectionRequest Add File request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addFileToCollectionWithHttpInfo(String key, AddFileToCollectionRequest addFileToCollectionRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addFileToCollectionValidateBeforeCall(key, addFileToCollectionRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a File to a Collection (asynchronously)
     * 
     * @param key Key of Collection (required)
     * @param addFileToCollectionRequest Add File request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileToCollectionAsync(String key, AddFileToCollectionRequest addFileToCollectionRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFileToCollectionValidateBeforeCall(key, addFileToCollectionRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addGroupToCollection
     * @param key Key of Collection (required)
     * @param addGroupToCollectionRequest Add Group request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupToCollectionCall(String key, AddGroupToCollectionRequest addGroupToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addGroupToCollectionRequest;

        // create path and map variables
        String localVarPath = "/collections/{key}/groups"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupToCollectionValidateBeforeCall(String key, AddGroupToCollectionRequest addGroupToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addGroupToCollection(Async)");
        }
        
        // verify the required parameter 'addGroupToCollectionRequest' is set
        if (addGroupToCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'addGroupToCollectionRequest' when calling addGroupToCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addGroupToCollectionCall(key, addGroupToCollectionRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a Group to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addGroupToCollectionRequest Add Group request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addGroupToCollection(String key, AddGroupToCollectionRequest addGroupToCollectionRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addGroupToCollectionWithHttpInfo(key, addGroupToCollectionRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a Group to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addGroupToCollectionRequest Add Group request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addGroupToCollectionWithHttpInfo(String key, AddGroupToCollectionRequest addGroupToCollectionRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addGroupToCollectionValidateBeforeCall(key, addGroupToCollectionRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Group to a Collection (asynchronously)
     * 
     * @param key Key of Collection (required)
     * @param addGroupToCollectionRequest Add Group request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupToCollectionAsync(String key, AddGroupToCollectionRequest addGroupToCollectionRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupToCollectionValidateBeforeCall(key, addGroupToCollectionRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUserToCollection
     * @param key Key of Collection (required)
     * @param addUserToCollectionRequest Add User request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToCollectionCall(String key, AddUserToCollectionRequest addUserToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addUserToCollectionRequest;

        // create path and map variables
        String localVarPath = "/collections/{key}/users"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToCollectionValidateBeforeCall(String key, AddUserToCollectionRequest addUserToCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addUserToCollection(Async)");
        }
        
        // verify the required parameter 'addUserToCollectionRequest' is set
        if (addUserToCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'addUserToCollectionRequest' when calling addUserToCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addUserToCollectionCall(key, addUserToCollectionRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a User to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addUserToCollectionRequest Add User request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addUserToCollection(String key, AddUserToCollectionRequest addUserToCollectionRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addUserToCollectionWithHttpInfo(key, addUserToCollectionRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a User to a Collection
     * 
     * @param key Key of Collection (required)
     * @param addUserToCollectionRequest Add User request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addUserToCollectionWithHttpInfo(String key, AddUserToCollectionRequest addUserToCollectionRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addUserToCollectionValidateBeforeCall(key, addUserToCollectionRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a User to a Collection (asynchronously)
     * 
     * @param key Key of Collection (required)
     * @param addUserToCollectionRequest Add User request (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToCollectionAsync(String key, AddUserToCollectionRequest addUserToCollectionRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToCollectionValidateBeforeCall(key, addUserToCollectionRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCollection
     * @param createCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionCall(CreateCollectionRequest createCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCollectionRequest;

        // create path and map variables
        String localVarPath = "/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(CreateCollectionRequest createCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createCollectionRequest' is set
        if (createCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'createCollectionRequest' when calling createCollection(Async)");
        }
        

        okhttp3.Call localVarCall = createCollectionCall(createCollectionRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Create a Collection
     * 
     * @param createCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public Collection createCollection(CreateCollectionRequest createCollectionRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Collection> localVarResp = createCollectionWithHttpInfo(createCollectionRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Create a Collection
     * 
     * @param createCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> createCollectionWithHttpInfo(CreateCollectionRequest createCollectionRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCollectionRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Collection (asynchronously)
     * 
     * @param createCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionAsync(CreateCollectionRequest createCollectionRequest, String xHiarcUserKey, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCollectionRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollection
     * @param key Key of Collection to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCollection(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCollectionCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Delete a Collection
     * 
     * @param key Key of Collection to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteCollection(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = deleteCollectionWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Delete a Collection
     * 
     * @param key Key of Collection to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteCollectionWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Collection (asynchronously)
     * 
     * @param key Key of Collection to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionAsync(String key, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCollection
     * @param findCollectionsRequest Collection query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCollectionCall(FindCollectionsRequest findCollectionsRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findCollectionsRequest;

        // create path and map variables
        String localVarPath = "/collections/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCollectionValidateBeforeCall(FindCollectionsRequest findCollectionsRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'findCollectionsRequest' is set
        if (findCollectionsRequest == null) {
            throw new ApiException("Missing the required parameter 'findCollectionsRequest' when calling findCollection(Async)");
        }
        

        okhttp3.Call localVarCall = findCollectionCall(findCollectionsRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Find a Collection
     * 
     * @param findCollectionsRequest Collection query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Collection> findCollection(FindCollectionsRequest findCollectionsRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Collection>> localVarResp = findCollectionWithHttpInfo(findCollectionsRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Find a Collection
     * 
     * @param findCollectionsRequest Collection query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Collection>> findCollectionWithHttpInfo(FindCollectionsRequest findCollectionsRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = findCollectionValidateBeforeCall(findCollectionsRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a Collection (asynchronously)
     * 
     * @param findCollectionsRequest Collection query (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCollectionAsync(FindCollectionsRequest findCollectionsRequest, String xHiarcUserKey, final ApiCallback<List<Collection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCollectionValidateBeforeCall(findCollectionsRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCollections
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCollectionsValidateBeforeCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllCollectionsCall(xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get all Collections
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Collection> getAllCollections(String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Collection>> localVarResp = getAllCollectionsWithHttpInfo(xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get all Collections
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Collection>> getAllCollectionsWithHttpInfo(String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getAllCollectionsValidateBeforeCall(xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Collections (asynchronously)
     * 
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsAsync(String xHiarcUserKey, final ApiCallback<List<Collection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCollectionsValidateBeforeCall(xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollection
     * @param key Key of collection to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCollection(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Collection&#39;s Info
     * 
     * @param key Key of collection to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public Collection getCollection(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<Collection> localVarResp = getCollectionWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a Collection&#39;s Info
     * 
     * @param key Key of collection to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> getCollectionWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Collection&#39;s Info (asynchronously)
     * 
     * @param key Key of collection to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionAsync(String key, String xHiarcUserKey, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionChildren
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionChildrenCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}/children"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionChildrenValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCollectionChildren(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionChildrenCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Collection&#39;s child Collections
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Collection> getCollectionChildren(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Collection>> localVarResp = getCollectionChildrenWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a Collection&#39;s child Collections
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Collection>> getCollectionChildrenWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionChildrenValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Collection&#39;s child Collections (asynchronously)
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Collection objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionChildrenAsync(String key, String xHiarcUserKey, final ApiCallback<List<Collection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionChildrenValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionFiles
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of File objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionFilesCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}/files"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionFilesValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCollectionFiles(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionFilesCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Collection&#39;s Files
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of File objects </td><td>  -  </td></tr>
     </table>
     */
    public List<HiarcFile> getCollectionFiles(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<HiarcFile>> localVarResp = getCollectionFilesWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a Collection&#39;s Files
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;HiarcFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of File objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HiarcFile>> getCollectionFilesWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionFilesValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<HiarcFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Collection&#39;s Files (asynchronously)
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of File objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionFilesAsync(String key, String xHiarcUserKey, final ApiCallback<List<HiarcFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionFilesValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<HiarcFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItems
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection Item objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemsCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}/items"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemsValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCollectionItems(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionItemsCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a Collection&#39;s child items, including Collections and Files
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return CollectionItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection Item objects </td><td>  -  </td></tr>
     </table>
     */
    public CollectionItems getCollectionItems(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<CollectionItems> localVarResp = getCollectionItemsWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a Collection&#39;s child items, including Collections and Files
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;CollectionItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection Item objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionItems> getCollectionItemsWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<CollectionItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Collection&#39;s child items, including Collections and Files (asynchronously)
     * 
     * @param key Key of collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection Item objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemsAsync(String key, String xHiarcUserKey, final ApiCallback<CollectionItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<CollectionItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFileFromCollection
     * @param key Key of Collection (required)
     * @param fileKey Key of File to remove from Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFileFromCollectionCall(String key, String fileKey, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{key}/files/{fileKey}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "fileKey" + "\\}", localVarApiClient.escapeString(fileKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileFromCollectionValidateBeforeCall(String key, String fileKey, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeFileFromCollection(Async)");
        }
        
        // verify the required parameter 'fileKey' is set
        if (fileKey == null) {
            throw new ApiException("Missing the required parameter 'fileKey' when calling removeFileFromCollection(Async)");
        }
        

        okhttp3.Call localVarCall = removeFileFromCollectionCall(key, fileKey, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Remove a File from a Collection
     * 
     * @param key Key of Collection (required)
     * @param fileKey Key of File to remove from Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object removeFileFromCollection(String key, String fileKey, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = removeFileFromCollectionWithHttpInfo(key, fileKey, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Remove a File from a Collection
     * 
     * @param key Key of Collection (required)
     * @param fileKey Key of File to remove from Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeFileFromCollectionWithHttpInfo(String key, String fileKey, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = removeFileFromCollectionValidateBeforeCall(key, fileKey, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a File from a Collection (asynchronously)
     * 
     * @param key Key of Collection (required)
     * @param fileKey Key of File to remove from Collection (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFileFromCollectionAsync(String key, String fileKey, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileFromCollectionValidateBeforeCall(key, fileKey, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollection
     * @param key Key of collection to get info (required)
     * @param updateCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionCall(String key, UpdateCollectionRequest updateCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateCollectionRequest;

        // create path and map variables
        String localVarPath = "/collections/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionValidateBeforeCall(String key, UpdateCollectionRequest updateCollectionRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCollection(Async)");
        }
        
        // verify the required parameter 'updateCollectionRequest' is set
        if (updateCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCollectionRequest' when calling updateCollection(Async)");
        }
        

        okhttp3.Call localVarCall = updateCollectionCall(key, updateCollectionRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Update a Collection
     * 
     * @param key Key of collection to get info (required)
     * @param updateCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public Collection updateCollection(String key, UpdateCollectionRequest updateCollectionRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Collection> localVarResp = updateCollectionWithHttpInfo(key, updateCollectionRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Update a Collection
     * 
     * @param key Key of collection to get info (required)
     * @param updateCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> updateCollectionWithHttpInfo(String key, UpdateCollectionRequest updateCollectionRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(key, updateCollectionRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Collection (asynchronously)
     * 
     * @param key Key of collection to get info (required)
     * @param updateCollectionRequest Collection information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Collection object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionAsync(String key, UpdateCollectionRequest updateCollectionRequest, String xHiarcUserKey, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(key, updateCollectionRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
