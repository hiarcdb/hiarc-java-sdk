/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.JSON;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.hiarcdb.client.model.AddClassificationToFileRequest;
import com.hiarcdb.client.model.AddGroupToFileRequest;
import com.hiarcdb.client.model.AddRetentionPolicyToFileRequest;
import com.hiarcdb.client.model.AddUserToFileRequest;
import com.hiarcdb.client.model.AddVersionToFileRequest;
import com.hiarcdb.client.model.AllowedFilesRequest;
import com.hiarcdb.client.model.AttachToExistingFileRequest;
import com.hiarcdb.client.model.Collection;
import com.hiarcdb.client.model.CopyFileRequest;
import com.hiarcdb.client.model.CreateDirectUploadUrlRequest;
import com.hiarcdb.client.model.CreateFileRequest;

import java.io.File;
import com.hiarcdb.client.model.FileDirectDownload;
import com.hiarcdb.client.model.FileDirectUpload;
import com.hiarcdb.client.model.FileVersion;
import com.hiarcdb.client.model.HiarcFile;
import com.hiarcdb.client.model.RetentionPolicyApplication;
import com.hiarcdb.client.model.UpdateFileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileApi {
    private ApiClient localVarApiClient;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addClassificationToFile
     * @param key Key of file (required)
     * @param addClassificationToFileRequest Classification information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClassificationToFileCall(String key, AddClassificationToFileRequest addClassificationToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addClassificationToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/classifications"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClassificationToFileValidateBeforeCall(String key, AddClassificationToFileRequest addClassificationToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addClassificationToFile(Async)");
        }
        
        // verify the required parameter 'addClassificationToFileRequest' is set
        if (addClassificationToFileRequest == null) {
            throw new ApiException("Missing the required parameter 'addClassificationToFileRequest' when calling addClassificationToFile(Async)");
        }
        

        okhttp3.Call localVarCall = addClassificationToFileCall(key, addClassificationToFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a Classification to a File
     * 
     * @param key Key of file (required)
     * @param addClassificationToFileRequest Classification information (required)
     * @param xHiarcUserKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addClassificationToFile(String key, AddClassificationToFileRequest addClassificationToFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addClassificationToFileWithHttpInfo(key, addClassificationToFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a Classification to a File
     * 
     * @param key Key of file (required)
     * @param addClassificationToFileRequest Classification information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addClassificationToFileWithHttpInfo(String key, AddClassificationToFileRequest addClassificationToFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addClassificationToFileValidateBeforeCall(key, addClassificationToFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Classification to a File (asynchronously)
     * 
     * @param key Key of file (required)
     * @param addClassificationToFileRequest Classification information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClassificationToFileAsync(String key, AddClassificationToFileRequest addClassificationToFileRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClassificationToFileValidateBeforeCall(key, addClassificationToFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addGroupToFile
     * @param key Key of file (required)
     * @param addGroupToFileRequest Group information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupToFileCall(String key, AddGroupToFileRequest addGroupToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addGroupToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/groups"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupToFileValidateBeforeCall(String key, AddGroupToFileRequest addGroupToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addGroupToFile(Async)");
        }
        
        // verify the required parameter 'addGroupToFileRequest' is set
        if (addGroupToFileRequest == null) {
            throw new ApiException("Missing the required parameter 'addGroupToFileRequest' when calling addGroupToFile(Async)");
        }
        

        okhttp3.Call localVarCall = addGroupToFileCall(key, addGroupToFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Give a group access to a File
     * 
     * @param key Key of file (required)
     * @param addGroupToFileRequest Group information (required)
     * @param xHiarcUserKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addGroupToFile(String key, AddGroupToFileRequest addGroupToFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addGroupToFileWithHttpInfo(key, addGroupToFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Give a group access to a File
     * 
     * @param key Key of file (required)
     * @param addGroupToFileRequest Group information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addGroupToFileWithHttpInfo(String key, AddGroupToFileRequest addGroupToFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addGroupToFileValidateBeforeCall(key, addGroupToFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Give a group access to a File (asynchronously)
     * 
     * @param key Key of file (required)
     * @param addGroupToFileRequest Group information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupToFileAsync(String key, AddGroupToFileRequest addGroupToFileRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupToFileValidateBeforeCall(key, addGroupToFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRetentionPolicyToFile
     * @param key Key of file (required)
     * @param addRetentionPolicyToFileRequest Retention Policy information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRetentionPolicyToFileCall(String key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addRetentionPolicyToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/retentionpolicies"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRetentionPolicyToFileValidateBeforeCall(String key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addRetentionPolicyToFile(Async)");
        }
        
        // verify the required parameter 'addRetentionPolicyToFileRequest' is set
        if (addRetentionPolicyToFileRequest == null) {
            throw new ApiException("Missing the required parameter 'addRetentionPolicyToFileRequest' when calling addRetentionPolicyToFile(Async)");
        }
        

        okhttp3.Call localVarCall = addRetentionPolicyToFileCall(key, addRetentionPolicyToFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a Retention Policy to a File
     * 
     * @param key Key of file (required)
     * @param addRetentionPolicyToFileRequest Retention Policy information (required)
     * @param xHiarcUserKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addRetentionPolicyToFile(String key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addRetentionPolicyToFileWithHttpInfo(key, addRetentionPolicyToFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a Retention Policy to a File
     * 
     * @param key Key of file (required)
     * @param addRetentionPolicyToFileRequest Retention Policy information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addRetentionPolicyToFileWithHttpInfo(String key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addRetentionPolicyToFileValidateBeforeCall(key, addRetentionPolicyToFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Retention Policy to a File (asynchronously)
     * 
     * @param key Key of file (required)
     * @param addRetentionPolicyToFileRequest Retention Policy information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRetentionPolicyToFileAsync(String key, AddRetentionPolicyToFileRequest addRetentionPolicyToFileRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRetentionPolicyToFileValidateBeforeCall(key, addRetentionPolicyToFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUserToFile
     * @param key Key of file (required)
     * @param addUserToFileRequest User information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToFileCall(String key, AddUserToFileRequest addUserToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addUserToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/users"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToFileValidateBeforeCall(String key, AddUserToFileRequest addUserToFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addUserToFile(Async)");
        }
        
        // verify the required parameter 'addUserToFileRequest' is set
        if (addUserToFileRequest == null) {
            throw new ApiException("Missing the required parameter 'addUserToFileRequest' when calling addUserToFile(Async)");
        }
        

        okhttp3.Call localVarCall = addUserToFileCall(key, addUserToFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Give a user access to a File
     * 
     * @param key Key of file (required)
     * @param addUserToFileRequest User information (required)
     * @param xHiarcUserKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addUserToFile(String key, AddUserToFileRequest addUserToFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = addUserToFileWithHttpInfo(key, addUserToFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Give a user access to a File
     * 
     * @param key Key of file (required)
     * @param addUserToFileRequest User information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addUserToFileWithHttpInfo(String key, AddUserToFileRequest addUserToFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = addUserToFileValidateBeforeCall(key, addUserToFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Give a user access to a File (asynchronously)
     * 
     * @param key Key of file (required)
     * @param addUserToFileRequest User information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToFileAsync(String key, AddUserToFileRequest addUserToFileRequest, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToFileValidateBeforeCall(key, addUserToFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVersion
     * @param key Key of file to add a version (required)
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVersionCall(String key, String request, File file, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/versions"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (request != null) {
            localVarFormParams.put("request", request);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVersionValidateBeforeCall(String key, String request, File file, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addVersion(Async)");
        }
        

        okhttp3.Call localVarCall = addVersionCall(key, request, file, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Add a new File Version
     * 
     * @param key Key of file to add a version (required)
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile addVersion(String key, AddVersionToFileRequest request, File file, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = addVersionWithHttpInfo(key, request, file, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Add a new File Version
     * 
     * @param key Key of file to add a version (required)
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> addVersionWithHttpInfo(String key, AddVersionToFileRequest request, File file, String xHiarcUserKey) throws ApiException {
        JSON json = new JSON();
        String requestString = json.serialize(request);
        okhttp3.Call localVarCall = addVersionValidateBeforeCall(key, requestString, file, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new File Version (asynchronously)
     * 
     * @param key Key of file to add a version (required)
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVersionAsync(String key, String xHiarcUserKey, String request, File file, final ApiCallback<HiarcFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVersionValidateBeforeCall(key, request, file, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachToExisitingFile
     * @param key Key of file to attach to (required)
     * @param attachToExistingFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachToExisitingFileCall(String key, AttachToExistingFileRequest attachToExistingFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = attachToExistingFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/attach"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachToExisitingFileValidateBeforeCall(String key, AttachToExistingFileRequest attachToExistingFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling attachToExisitingFile(Async)");
        }
        
        // verify the required parameter 'attachToExistingFileRequest' is set
        if (attachToExistingFileRequest == null) {
            throw new ApiException("Missing the required parameter 'attachToExistingFileRequest' when calling attachToExisitingFile(Async)");
        }
        

        okhttp3.Call localVarCall = attachToExisitingFileCall(key, attachToExistingFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Attach to an existing File
     * 
     * @param key Key of file to attach to (required)
     * @param attachToExistingFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile attachToExisitingFile(String key, AttachToExistingFileRequest attachToExistingFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = attachToExisitingFileWithHttpInfo(key, attachToExistingFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Attach to an existing File
     * 
     * @param key Key of file to attach to (required)
     * @param attachToExistingFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> attachToExisitingFileWithHttpInfo(String key, AttachToExistingFileRequest attachToExistingFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = attachToExisitingFileValidateBeforeCall(key, attachToExistingFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach to an existing File (asynchronously)
     * 
     * @param key Key of file to attach to (required)
     * @param attachToExistingFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachToExisitingFileAsync(String key, AttachToExistingFileRequest attachToExistingFileRequest, String xHiarcUserKey, final ApiCallback<HiarcFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachToExisitingFileValidateBeforeCall(key, attachToExistingFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyFile
     * @param key Key of file to attach to (required)
     * @param copyFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyFileCall(String key, CopyFileRequest copyFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = copyFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}/copy"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyFileValidateBeforeCall(String key, CopyFileRequest copyFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling copyFile(Async)");
        }
        
        // verify the required parameter 'copyFileRequest' is set
        if (copyFileRequest == null) {
            throw new ApiException("Missing the required parameter 'copyFileRequest' when calling copyFile(Async)");
        }
        

        okhttp3.Call localVarCall = copyFileCall(key, copyFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Copy a File
     * 
     * @param key Key of file to attach to (required)
     * @param copyFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile copyFile(String key, CopyFileRequest copyFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = copyFileWithHttpInfo(key, copyFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Copy a File
     * 
     * @param key Key of file to attach to (required)
     * @param copyFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> copyFileWithHttpInfo(String key, CopyFileRequest copyFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = copyFileValidateBeforeCall(key, copyFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a File (asynchronously)
     * 
     * @param key Key of file to attach to (required)
     * @param copyFileRequest File information (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyFileAsync(String key, CopyFileRequest copyFileRequest, String xHiarcUserKey, final ApiCallback<HiarcFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyFileValidateBeforeCall(key, copyFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDirectUploadUrl
     * @param createDirectUploadUrlRequest Storage service information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct upload object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectUploadUrlCall(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback _callback) throws ApiException {
        if(createDirectUploadUrlRequest == null) {
            createDirectUploadUrlRequest = new CreateDirectUploadUrlRequest();
        }
        Object localVarPostBody = createDirectUploadUrlRequest;

        // create path and map variables
        String localVarPath = "/files/directuploadurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expiresInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresInSeconds", expiresInSeconds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectUploadUrlValidateBeforeCall(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectUploadUrlCall(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds, _callback);
        return localVarCall;

    }

    /**
     * Create a direct upload url to a storage service
     * 
     * @param createDirectUploadUrlRequest Storage service information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @return FileDirectUpload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct upload object </td><td>  -  </td></tr>
     </table>
     */
    public FileDirectUpload createDirectUploadUrl(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, String xHiarcUserKey, Integer expiresInSeconds) throws ApiException {
        ApiResponse<FileDirectUpload> localVarResp = createDirectUploadUrlWithHttpInfo(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds);
        return localVarResp.getData();
    }

    /**
     * Create a direct upload url to a storage service
     * 
     * @param createDirectUploadUrlRequest Storage service information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @return ApiResponse&lt;FileDirectUpload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct upload object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileDirectUpload> createDirectUploadUrlWithHttpInfo(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, String xHiarcUserKey, Integer expiresInSeconds) throws ApiException {
        okhttp3.Call localVarCall = createDirectUploadUrlValidateBeforeCall(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds, null);
        Type localVarReturnType = new TypeToken<FileDirectUpload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a direct upload url to a storage service (asynchronously)
     * 
     * @param createDirectUploadUrlRequest Storage service information (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct upload object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectUploadUrlAsync(CreateDirectUploadUrlRequest createDirectUploadUrlRequest, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback<FileDirectUpload> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectUploadUrlValidateBeforeCall(createDirectUploadUrlRequest, xHiarcUserKey, expiresInSeconds, _callback);
        Type localVarReturnType = new TypeToken<FileDirectUpload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFile
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileCall(String request, File file, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (request != null) {
            localVarFormParams.put("request", request);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileValidateBeforeCall(String request, File file, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createFileCall(request, file, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Create a File
     * 
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile createFile(CreateFileRequest request, File file, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = createFileWithHttpInfo(request, file, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Create a File
     * 
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> createFileWithHttpInfo(CreateFileRequest request, File file, String xHiarcUserKey) throws ApiException {
        JSON json = new JSON();
        String requestString = json.serialize(request);
        okhttp3.Call localVarCall = createFileValidateBeforeCall(requestString, file, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a File (asynchronously)
     * 
     * @param xHiarcUserKey  (optional)
     * @param request  (optional)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileAsync(CreateFileRequest request, File file, String xHiarcUserKey, final ApiCallback<HiarcFile> _callback) throws ApiException {
        JSON json = new JSON();
        String requestString = json.serialize(request);
        okhttp3.Call localVarCall = createFileValidateBeforeCall(requestString, file, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param key Key of file to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteFile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFileCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Delete a File
     * 
     * @param key Key of file to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteFile(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFileWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Delete a File
     * 
     * @param key Key of file to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteFileWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a File (asynchronously)
     * 
     * @param key Key of file to delete (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String key, String xHiarcUserKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadFile
     * @param key Key of file to download (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/download"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFileValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling downloadFile(Async)");
        }
        

        okhttp3.Call localVarCall = downloadFileCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Download a File
     * 
     * @param key Key of file to download (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary file </td><td>  -  </td></tr>
     </table>
     */
    public Object downloadFile(String key, String filepath, String xHiarcUserKey) throws ApiException {
        ApiResponse<Object> localVarResp = downloadFileWithHttpInfo(key, filepath, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Download a File
     * 
     * @param key Key of file to download (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> downloadFileWithHttpInfo(String key, String filepath, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = downloadFileValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.executeDownload(localVarCall, localVarReturnType, filepath);
    }

    /**
     * Download a File (asynchronously)
     * 
     * @param key Key of file to download (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A binary file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileAsync(String key, String xHiarcUserKey, String filepath, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFileValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeDownloadAsync(localVarCall, localVarReturnType, filepath, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionsForFile
     * @param key Key of file to get all collections (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsForFileCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/collections"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionsForFileValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCollectionsForFile(Async)");
        }
        

        okhttp3.Call localVarCall = getCollectionsForFileCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a list of Collections for a File
     * 
     * @param key Key of file to get all collections (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collections </td><td>  -  </td></tr>
     </table>
     */
    public List<Collection> getCollectionsForFile(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Collection>> localVarResp = getCollectionsForFileWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a list of Collections for a File
     * 
     * @param key Key of file to get all collections (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collections </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Collection>> getCollectionsForFileWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionsForFileValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Collections for a File (asynchronously)
     * 
     * @param key Key of file to get all collections (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Collections </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsForFileAsync(String key, String xHiarcUserKey, final ApiCallback<List<Collection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionsForFileValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectDownloadUrl
     * @param key Key of file to get download URL (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct download URL object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDownloadUrlCall(String key, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/directdownloadurl"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expiresInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresInSeconds", expiresInSeconds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectDownloadUrlValidateBeforeCall(String key, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getDirectDownloadUrl(Async)");
        }
        

        okhttp3.Call localVarCall = getDirectDownloadUrlCall(key, xHiarcUserKey, expiresInSeconds, _callback);
        return localVarCall;

    }

    /**
     * Get a direct download URL to a File
     * 
     * @param key Key of file to get download URL (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @return FileDirectDownload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct download URL object </td><td>  -  </td></tr>
     </table>
     */
    public FileDirectDownload getDirectDownloadUrl(String key, String xHiarcUserKey, Integer expiresInSeconds) throws ApiException {
        ApiResponse<FileDirectDownload> localVarResp = getDirectDownloadUrlWithHttpInfo(key, xHiarcUserKey, expiresInSeconds);
        return localVarResp.getData();
    }

    /**
     * Get a direct download URL to a File
     * 
     * @param key Key of file to get download URL (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @return ApiResponse&lt;FileDirectDownload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct download URL object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileDirectDownload> getDirectDownloadUrlWithHttpInfo(String key, String xHiarcUserKey, Integer expiresInSeconds) throws ApiException {
        okhttp3.Call localVarCall = getDirectDownloadUrlValidateBeforeCall(key, xHiarcUserKey, expiresInSeconds, null);
        Type localVarReturnType = new TypeToken<FileDirectDownload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a direct download URL to a File (asynchronously)
     * 
     * @param key Key of file to get download URL (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param expiresInSeconds When access to the url should expire (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A direct download URL object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDownloadUrlAsync(String key, String xHiarcUserKey, Integer expiresInSeconds, final ApiCallback<FileDirectDownload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectDownloadUrlValidateBeforeCall(key, xHiarcUserKey, expiresInSeconds, _callback);
        Type localVarReturnType = new TypeToken<FileDirectDownload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param key Key of file to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getFile(Async)");
        }
        

        okhttp3.Call localVarCall = getFileCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a File&#39;s Info
     * 
     * @param key Key of file to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile getFile(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = getFileWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a File&#39;s Info
     * 
     * @param key Key of file to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> getFileWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a File&#39;s Info (asynchronously)
     * 
     * @param key Key of file to get info (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String key, String xHiarcUserKey, final ApiCallback<HiarcFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetentionPolicies
     * @param key Key of file to get all retention policies (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Retention Policies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionPoliciesCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/retentionpolicies"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetentionPoliciesValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getRetentionPolicies(Async)");
        }
        

        okhttp3.Call localVarCall = getRetentionPoliciesCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a list of Retention Policies on a File
     * 
     * @param key Key of file to get all retention policies (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;RetentionPolicyApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Retention Policies </td><td>  -  </td></tr>
     </table>
     */
    public List<RetentionPolicyApplication> getRetentionPolicies(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<RetentionPolicyApplication>> localVarResp = getRetentionPoliciesWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a list of Retention Policies on a File
     * 
     * @param key Key of file to get all retention policies (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;RetentionPolicyApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Retention Policies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetentionPolicyApplication>> getRetentionPoliciesWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getRetentionPoliciesValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<RetentionPolicyApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Retention Policies on a File (asynchronously)
     * 
     * @param key Key of file to get all retention policies (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Retention Policies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionPoliciesAsync(String key, String xHiarcUserKey, final ApiCallback<List<RetentionPolicyApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetentionPoliciesValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<RetentionPolicyApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersions
     * @param key Key of file to get all versions (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File Versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionsCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{key}/versions"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionsValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getVersions(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionsCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get a list of File Versions
     * 
     * @param key Key of file to get all versions (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;FileVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File Versions </td><td>  -  </td></tr>
     </table>
     */
    public List<FileVersion> getVersions(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<FileVersion>> localVarResp = getVersionsWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get a list of File Versions
     * 
     * @param key Key of file to get all versions (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;FileVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File Versions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileVersion>> getVersionsWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getVersionsValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<FileVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of File Versions (asynchronously)
     * 
     * @param key Key of file to get all versions (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File Versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionsAsync(String key, String xHiarcUserKey, final ApiCallback<List<FileVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionsValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<FileVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFile
     * @param key Key of file to update (required)
     * @param updateFileRequest File information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileCall(String key, UpdateFileRequest updateFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateFileRequest;

        // create path and map variables
        String localVarPath = "/files/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileValidateBeforeCall(String key, UpdateFileRequest updateFileRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateFile(Async)");
        }
        
        // verify the required parameter 'updateFileRequest' is set
        if (updateFileRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFileRequest' when calling updateFile(Async)");
        }
        

        okhttp3.Call localVarCall = updateFileCall(key, updateFileRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Update a File
     * 
     * @param key Key of file to update (required)
     * @param updateFileRequest File information (required)
     * @return HiarcFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public HiarcFile updateFile(String key, UpdateFileRequest updateFileRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<HiarcFile> localVarResp = updateFileWithHttpInfo(key, updateFileRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Update a File
     * 
     * @param key Key of file to update (required)
     * @param updateFileRequest File information (required)
     * @return ApiResponse&lt;HiarcFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiarcFile> updateFileWithHttpInfo(String key, UpdateFileRequest updateFileRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = updateFileValidateBeforeCall(key, updateFileRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a File (asynchronously)
     * 
     * @param key Key of file to update (required)
     * @param updateFileRequest File information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A File object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileAsync(String key, UpdateFileRequest updateFileRequest, String xHiarcUserKey, final ApiCallback<HiarcFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileValidateBeforeCall(key, updateFileRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<HiarcFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for filterAllowedFiles
     * @param allowedFilesRequest File key list (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterAllowedFilesCall(AllowedFilesRequest allowedFilesRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = allowedFilesRequest;

        // create path and map variables
        String localVarPath = "/files/allowed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterAllowedFilesValidateBeforeCall(AllowedFilesRequest allowedFilesRequest, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'allowedFilesRequest' is set
        if (allowedFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'allowedFilesRequest' when calling filterAllowedFiles(Async)");
        }
        

        okhttp3.Call localVarCall = filterAllowedFilesCall(allowedFilesRequest, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Filter a list of File keys that a User can access
     * 
     * @param allowedFilesRequest File key list (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File keys </td><td>  -  </td></tr>
     </table>
     */
    public List<String> filterAllowedFiles(AllowedFilesRequest allowedFilesRequest, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<String>> localVarResp = filterAllowedFilesWithHttpInfo(allowedFilesRequest, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Filter a list of File keys that a User can access
     * 
     * @param allowedFilesRequest File key list (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> filterAllowedFilesWithHttpInfo(AllowedFilesRequest allowedFilesRequest, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = filterAllowedFilesValidateBeforeCall(allowedFilesRequest, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter a list of File keys that a User can access (asynchronously)
     * 
     * @param allowedFilesRequest File key list (required)
     * @param xHiarcUserKey Optional key of user to impersonate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of File keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterAllowedFilesAsync(AllowedFilesRequest allowedFilesRequest, String xHiarcUserKey, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterAllowedFilesValidateBeforeCall(allowedFilesRequest, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
