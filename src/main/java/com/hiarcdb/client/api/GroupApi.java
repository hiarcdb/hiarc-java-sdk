/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hiarcdb.client.model.CreateGroupRequest;
import com.hiarcdb.client.model.CreateOrUpdateEntityRequest;
import com.hiarcdb.client.model.FindEntityRequest;
import com.hiarcdb.client.model.FindGroupsRequest;
import com.hiarcdb.client.model.Group;
import com.hiarcdb.client.model.UpdateGroupRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient localVarApiClient;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addUserToGroup
     * @param key Key of Group (required)
     * @param userKey Key of User to add to Group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToGroupCall(String key, String userKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{key}/users/{userKey}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "userKey" + "\\}", localVarApiClient.escapeString(userKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToGroupValidateBeforeCall(String key, String userKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addUserToGroup(Async)");
        }
        
        // verify the required parameter 'userKey' is set
        if (userKey == null) {
            throw new ApiException("Missing the required parameter 'userKey' when calling addUserToGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addUserToGroupCall(key, userKey, _callback);
        return localVarCall;

    }

    /**
     * Add a User to a Group
     * 
     * @param key Key of Group (required)
     * @param userKey Key of User to add to Group (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object addUserToGroup(String key, String userKey) throws ApiException {
        ApiResponse<Object> localVarResp = addUserToGroupWithHttpInfo(key, userKey);
        return localVarResp.getData();
    }

    /**
     * Add a User to a Group
     * 
     * @param key Key of Group (required)
     * @param userKey Key of User to add to Group (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addUserToGroupWithHttpInfo(String key, String userKey) throws ApiException {
        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(key, userKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a User to a Group (asynchronously)
     * 
     * @param key Key of Group (required)
     * @param userKey Key of User to add to Group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToGroupAsync(String key, String userKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(key, userKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroup
     * @param createGroupRequest Group information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(CreateGroupRequest createGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createGroupRequest;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(CreateGroupRequest createGroupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createGroupRequest' is set
        if (createGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupRequest' when calling createGroup(Async)");
        }
        

        okhttp3.Call localVarCall = createGroupCall(createGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a Group
     * 
     * @param createGroupRequest Group information (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public Group createGroup(CreateGroupRequest createGroupRequest) throws ApiException {
        ApiResponse<Group> localVarResp = createGroupWithHttpInfo(createGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Group
     * 
     * @param createGroupRequest Group information (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> createGroupWithHttpInfo(CreateGroupRequest createGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Group (asynchronously)
     * 
     * @param createGroupRequest Group information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(CreateGroupRequest createGroupRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param key Key of Group to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupCall(key, _callback);
        return localVarCall;

    }

    /**
     * Delete a Group
     * 
     * @param key Key of Group to delete (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteGroup(String key) throws ApiException {
        ApiResponse<Object> localVarResp = deleteGroupWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Delete a Group
     * 
     * @param key Key of Group to delete (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteGroupWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Group (asynchronously)
     * 
     * @param key Key of Group to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String key, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findGroup
     * @param findGroupsRequest Group query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findGroupCall(FindGroupsRequest findGroupsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findGroupsRequest;

        // create path and map variables
        String localVarPath = "/groups/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findGroupValidateBeforeCall(FindGroupsRequest findGroupsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'findGroupsRequest' is set
        if (findGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'findGroupsRequest' when calling findGroup(Async)");
        }
        

        okhttp3.Call localVarCall = findGroupCall(findGroupsRequest, _callback);
        return localVarCall;

    }

    /**
     * Find a Group
     * 
     * @param findGroupsRequest Group query (required)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> findGroup(FindGroupsRequest findGroupsRequest) throws ApiException {
        ApiResponse<List<Group>> localVarResp = findGroupWithHttpInfo(findGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Find a Group
     * 
     * @param findGroupsRequest Group query (required)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> findGroupWithHttpInfo(FindGroupsRequest findGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = findGroupValidateBeforeCall(findGroupsRequest, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a Group (asynchronously)
     * 
     * @param findGroupsRequest Group query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findGroupAsync(FindGroupsRequest findGroupsRequest, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findGroupValidateBeforeCall(findGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGroups
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllGroupsCall(_callback);
        return localVarCall;

    }

    /**
     * Get all Groups
     * 
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> getAllGroups() throws ApiException {
        ApiResponse<List<Group>> localVarResp = getAllGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all Groups
     * 
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> getAllGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Groups (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsAsync(final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param key Key of Group to get info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupCall(key, _callback);
        return localVarCall;

    }

    /**
     * Get a Group&#39;s Info
     * 
     * @param key Key of Group to get info (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public Group getGroup(String key) throws ApiException {
        ApiResponse<Group> localVarResp = getGroupWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Get a Group&#39;s Info
     * 
     * @param key Key of Group to get info (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getGroupWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Group&#39;s Info (asynchronously)
     * 
     * @param key Key of Group to get info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(String key, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupsForCurrentUser
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForCurrentUserCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/current/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsForCurrentUserValidateBeforeCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getGroupsForCurrentUserCall(xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get the Groups for the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> getGroupsForCurrentUser(String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Group>> localVarResp = getGroupsForCurrentUserWithHttpInfo(xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get the Groups for the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> getGroupsForCurrentUserWithHttpInfo(String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getGroupsForCurrentUserValidateBeforeCall(xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Groups for the current User (asynchronously)
     * 
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForCurrentUserAsync(String xHiarcUserKey, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsForCurrentUserValidateBeforeCall(xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param key Key of Group to update (required)
     * @param updateGroupRequest Group information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(String key, UpdateGroupRequest updateGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(String key, UpdateGroupRequest updateGroupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'updateGroupRequest' is set
        if (updateGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGroupRequest' when calling updateGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupCall(key, updateGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a Group
     * 
     * @param key Key of Group to update (required)
     * @param updateGroupRequest Group information (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public Group updateGroup(String key, UpdateGroupRequest updateGroupRequest) throws ApiException {
        ApiResponse<Group> localVarResp = updateGroupWithHttpInfo(key, updateGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Group
     * 
     * @param key Key of Group to update (required)
     * @param updateGroupRequest Group information (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> updateGroupWithHttpInfo(String key, UpdateGroupRequest updateGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(key, updateGroupRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Group (asynchronously)
     * 
     * @param key Key of Group to update (required)
     * @param updateGroupRequest Group information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(String key, UpdateGroupRequest updateGroupRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(key, updateGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getGroupsForUser
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForUserCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{key}/groups"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsForUserValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getGroupsForUser(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupsForUserCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get Groups for a User
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> getGroupsForUser(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Group>> localVarResp = getGroupsForUserWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get Groups for a User
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> getGroupsForUserWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getGroupsForUserValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Groups for a User (asynchronously)
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForUserAsync(String key, String xHiarcUserKey, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsForUserValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
