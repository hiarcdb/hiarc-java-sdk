/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hiarcdb.client.model.CreateLegalHoldRequest;
import com.hiarcdb.client.model.CreateOrUpdateEntityRequest;
import com.hiarcdb.client.model.LegalHold;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LegalHoldApi {
    private ApiClient localVarApiClient;

    public LegalHoldApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LegalHoldApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createLegalHold
     * @param createLegalHoldRequest Legal Hold information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLegalHoldCall(CreateLegalHoldRequest createLegalHoldRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createLegalHoldRequest;

        // create path and map variables
        String localVarPath = "/legalholds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLegalHoldValidateBeforeCall(CreateLegalHoldRequest createLegalHoldRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createLegalHoldRequest' is set
        if (createLegalHoldRequest == null) {
            throw new ApiException("Missing the required parameter 'createLegalHoldRequest' when calling createLegalHold(Async)");
        }
        

        okhttp3.Call localVarCall = createLegalHoldCall(createLegalHoldRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a Legal Hold
     * 
     * @param createLegalHoldRequest Legal Hold information (required)
     * @return LegalHold
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public LegalHold createLegalHold(CreateLegalHoldRequest createLegalHoldRequest) throws ApiException {
        ApiResponse<LegalHold> localVarResp = createLegalHoldWithHttpInfo(createLegalHoldRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Legal Hold
     * 
     * @param createLegalHoldRequest Legal Hold information (required)
     * @return ApiResponse&lt;LegalHold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegalHold> createLegalHoldWithHttpInfo(CreateLegalHoldRequest createLegalHoldRequest) throws ApiException {
        okhttp3.Call localVarCall = createLegalHoldValidateBeforeCall(createLegalHoldRequest, null);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Legal Hold (asynchronously)
     * 
     * @param createLegalHoldRequest Legal Hold information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLegalHoldAsync(CreateLegalHoldRequest createLegalHoldRequest, final ApiCallback<LegalHold> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLegalHoldValidateBeforeCall(createLegalHoldRequest, _callback);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLegalHold
     * @param key Key of Legal Hold to get info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLegalHoldCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legalholds/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalHoldValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getLegalHold(Async)");
        }
        

        okhttp3.Call localVarCall = getLegalHoldCall(key, _callback);
        return localVarCall;

    }

    /**
     * Get a Legal Hold&#39;s Info
     * 
     * @param key Key of Legal Hold to get info (required)
     * @return LegalHold
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public LegalHold getLegalHold(String key) throws ApiException {
        ApiResponse<LegalHold> localVarResp = getLegalHoldWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Get a Legal Hold&#39;s Info
     * 
     * @param key Key of Legal Hold to get info (required)
     * @return ApiResponse&lt;LegalHold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegalHold> getLegalHoldWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getLegalHoldValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Legal Hold&#39;s Info (asynchronously)
     * 
     * @param key Key of Legal Hold to get info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Legal Hold object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLegalHoldAsync(String key, final ApiCallback<LegalHold> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalHoldValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
