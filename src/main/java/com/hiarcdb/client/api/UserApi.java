/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiarcdb.client.api;

import com.hiarcdb.client.ApiCallback;
import com.hiarcdb.client.ApiClient;
import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.ApiResponse;
import com.hiarcdb.client.Configuration;
import com.hiarcdb.client.Pair;
import com.hiarcdb.client.ProgressRequestBody;
import com.hiarcdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hiarcdb.client.model.CreateOrUpdateEntityRequest;
import com.hiarcdb.client.model.CreateUserRequest;
import com.hiarcdb.client.model.FindEntityRequest;
import com.hiarcdb.client.model.FindUsersRequest;
import com.hiarcdb.client.model.Group;
import com.hiarcdb.client.model.UpdateUserRequest;
import com.hiarcdb.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param createUserRequest User information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(createUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a User
     * 
     * @param createUserRequest User information (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a User
     * 
     * @param createUserRequest User information (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a User (asynchronously)
     * 
     * @param createUserRequest User information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(CreateUserRequest createUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param key Key of user to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(key, _callback);
        return localVarCall;

    }

    /**
     * Delete a User
     * 
     * @param key Key of user to delete (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteUser(String key) throws ApiException {
        ApiResponse<Object> localVarResp = deleteUserWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Delete a User
     * 
     * @param key Key of user to delete (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteUserWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a User (asynchronously)
     * 
     * @param key Key of user to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String key, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findUser
     * @param findUsersRequest User query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findUserCall(FindUsersRequest findUsersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findUsersRequest;

        // create path and map variables
        String localVarPath = "/users/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUserValidateBeforeCall(FindUsersRequest findUsersRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'findUsersRequest' is set
        if (findUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'findUsersRequest' when calling findUser(Async)");
        }
        

        okhttp3.Call localVarCall = findUserCall(findUsersRequest, _callback);
        return localVarCall;

    }

    /**
     * Find a User
     * 
     * @param findUsersRequest User query (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public List<User> findUser(FindUsersRequest findUsersRequest) throws ApiException {
        ApiResponse<List<User>> localVarResp = findUserWithHttpInfo(findUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Find a User
     * 
     * @param findUsersRequest User query (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> findUserWithHttpInfo(FindUsersRequest findUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = findUserValidateBeforeCall(findUsersRequest, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a User (asynchronously)
     * 
     * @param findUsersRequest User query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findUserAsync(FindUsersRequest findUsersRequest, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUserValidateBeforeCall(findUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllUsersCall(_callback);
        return localVarCall;

    }

    /**
     * Get all Users
     * 
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getAllUsers() throws ApiException {
        ApiResponse<List<User>> localVarResp = getAllUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all Users
     * 
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getAllUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Users (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of User objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersAsync(final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentUser
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCurrentUserCall(xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public User getCurrentUser(String xHiarcUserKey) throws ApiException {
        ApiResponse<User> localVarResp = getCurrentUserWithHttpInfo(xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getCurrentUserWithHttpInfo(String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current User (asynchronously)
     * 
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserAsync(String xHiarcUserKey, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupsForCurrentUser
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForCurrentUserCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/current/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth", "JWTBearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsForCurrentUserValidateBeforeCall(String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getGroupsForCurrentUserCall(xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get the Groups for the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> getGroupsForCurrentUser(String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Group>> localVarResp = getGroupsForCurrentUserWithHttpInfo(xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get the Groups for the current User
     * 
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> getGroupsForCurrentUserWithHttpInfo(String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getGroupsForCurrentUserValidateBeforeCall(xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Groups for the current User (asynchronously)
     * 
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForCurrentUserAsync(String xHiarcUserKey, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsForCurrentUserValidateBeforeCall(xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupsForUser
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForUserCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{key}/groups"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xHiarcUserKey != null) {
            localVarHeaderParams.put("X-Hiarc-User-Key", localVarApiClient.parameterToString(xHiarcUserKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsForUserValidateBeforeCall(String key, String xHiarcUserKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getGroupsForUser(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupsForUserCall(key, xHiarcUserKey, _callback);
        return localVarCall;

    }

    /**
     * Get Groups for a User
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Group> getGroupsForUser(String key, String xHiarcUserKey) throws ApiException {
        ApiResponse<List<Group>> localVarResp = getGroupsForUserWithHttpInfo(key, xHiarcUserKey);
        return localVarResp.getData();
    }

    /**
     * Get Groups for a User
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Group>> getGroupsForUserWithHttpInfo(String key, String xHiarcUserKey) throws ApiException {
        okhttp3.Call localVarCall = getGroupsForUserValidateBeforeCall(key, xHiarcUserKey, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Groups for a User (asynchronously)
     * 
     * @param key Key of user (required)
     * @param xHiarcUserKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Group objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsForUserAsync(String key, String xHiarcUserKey, final ApiCallback<List<Group>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsForUserValidateBeforeCall(key, xHiarcUserKey, _callback);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param key Key of user to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(key, _callback);
        return localVarCall;

    }

    /**
     * Get a User
     * 
     * @param key Key of user to get (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String key) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Get a User
     * 
     * @param key Key of user to get (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a User (asynchronously)
     * 
     * @param key Key of user to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String key, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param key Key of user to get (required)
     * @param updateUserRequest User information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String key, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/users/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AdminApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String key, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(key, updateUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a User
     * 
     * @param key Key of user to get (required)
     * @param updateUserRequest User information (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String key, UpdateUserRequest updateUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(key, updateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a User
     * 
     * @param key Key of user to get (required)
     * @param updateUserRequest User information (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String key, UpdateUserRequest updateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(key, updateUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a User (asynchronously)
     * 
     * @param key Key of user to get (required)
     * @param updateUserRequest User information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String key, UpdateUserRequest updateUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(key, updateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
