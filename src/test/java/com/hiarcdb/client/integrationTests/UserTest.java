/*
 * Hiarc API
 * Welcome to the Hiarc API documentation.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hiarcdb.client.integrationTests;

import com.hiarcdb.client.ApiException;
import com.hiarcdb.client.api.UserApi;
import com.hiarcdb.client.model.CreateUserRequest;
import com.hiarcdb.client.model.CreateUserTokenRequest;
import com.hiarcdb.client.model.FindUsersRequest;
import com.hiarcdb.client.model.Group;
import com.hiarcdb.client.model.UpdateUserRequest;
import com.hiarcdb.client.model.User;
import com.hiarcdb.client.model.UserCredentials;

import org.junit.Test;
import org.junit.Assert;

import org.junit.Before;

import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserTest {
    private final HiarcTestUtil util = new HiarcTestUtil();

    @Before
    public void setup() {
        try {
            util.admin.resetDB();
        } catch (ApiException e) {
            e.printStackTrace();
        }
    }

    /**
     *  User CRUD
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userCRUDTest() throws ApiException {
        CreateUserRequest createUserRequest = util.createUser();
        User cu = util.users.createUser(createUserRequest);
        User gu = util.users.getUser(cu.getKey());
        Assert.assertEquals(cu, gu);

        String newName = "New Name";
        String newDescription = "New description";
        UpdateUserRequest uur = new UpdateUserRequest();
        uur.setName(newName);
        uur.setDescription(newDescription);

        User uu = util.users.updateUser(cu.getKey(), uur);
        Assert.assertEquals(uu.getName(), newName);
        Assert.assertEquals(uu.getDescription(), newDescription);
        Assert.assertTrue(uu.getModifiedAt().isAfter(uu.getCreatedAt()));

        Assert.assertThrows(ApiException.class, () -> {
            uur.setKey("new key");
            uur.setName(newName);
            uur.setDescription(newDescription);

            util.users.updateUser(cu.getKey(), uur);
        });

        util.users.deleteUser(cu.getKey());
        Assert.assertThrows(ApiException.class, () -> {
            util.users.getUser(cu.getKey());
        });
    }

    /**
    * Get all Users
    *
    *
    *
    * @throws ApiException if the Api call fails
    * 
    */
    @Test
    public void getAllUsersTest() throws ApiException {
        for (int i = 0; i < util.LARGE_ENTITY_COUNT; i++) {
            CreateUserRequest cur = util.createUser();
            util.users.createUser(cur);
        }
        List<User> u = util.users.getAllUsers();
        Assert.assertEquals(u.size(), util.LARGE_ENTITY_COUNT);
    }

    /**
     * Get the current User
     *
     *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User cu = util.users.createUser(util.createUser());
        User gcu = util.users.getCurrentUser(cu.getKey());
        Assert.assertEquals(cu, gcu);

        CreateUserTokenRequest cutr = new CreateUserTokenRequest();
        cutr.setKey(cu.getKey());
        UserCredentials token = util.tokens.createUserToken(cutr);
        UserApi lu = new UserApi(util.createJWTConfig(token.getBearerToken()));

        User gtu = lu.getCurrentUser(null);
        Assert.assertEquals(gtu, cu);
    }

    /**
     * Get Groups for User
     *
     *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsForUserTest() throws ApiException {
        User u1 = util.users.createUser(util.createUser());
        Group g1 = util.groups.createGroup(util.createGroup());
        Group g2 = util.groups.createGroup(util.createGroup());
        Group g3 = util.groups.createGroup(util.createGroup());

        util.groups.addUserToGroup(g1.getKey(), u1.getKey());
        util.groups.addUserToGroup(g2.getKey(), u1.getKey());

        List<Group> gs = util.users.getGroupsForUser(u1.getKey(), null);
        Assert.assertTrue(gs.size() == 2);
        assertThat(gs, hasItem(g1));
        assertThat(gs, hasItem(g2));
        assertThat(gs, not(hasItem(g3)));
    }

    /**
     * Get Groups for the current User
     *
     *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsForCurrentUserTest() throws ApiException {
        User u1 = util.users.createUser(util.createUser());
        Group g1 = util.groups.createGroup(util.createGroup());
        Group g2 = util.groups.createGroup(util.createGroup());
        Group g3 = util.groups.createGroup(util.createGroup());

        util.groups.addUserToGroup(g1.getKey(), u1.getKey());
        util.groups.addUserToGroup(g2.getKey(), u1.getKey());

        CreateUserTokenRequest cutr = new CreateUserTokenRequest();
        cutr.setKey(u1.getKey());
        UserCredentials token = util.tokens.createUserToken(cutr);
        UserApi lu = new UserApi(util.createJWTConfig(token.getBearerToken()));

        List<Group> gs1 = lu.getGroupsForCurrentUser(null);
        Assert.assertTrue(gs1.size() == 2);
        assertThat(gs1, hasItem(g1));
        assertThat(gs1, hasItem(g2));
        assertThat(gs1, not(hasItem(g3)));

        UserApi au = new UserApi(util.createAdminConfig());
        List<Group> gs2 = au.getGroupsForCurrentUser(u1.getKey());
        Assert.assertTrue(gs2.size() == 2);
        assertThat(gs2, hasItem(g1));
        assertThat(gs2, hasItem(g2));
        assertThat(gs2, not(hasItem(g3)));
    }

    /**
     * Create a User with Metadata
     *
     * 
     *
     * @throws ApiException   if the Api call fails
     * @throws ParseException
     */
    @Test
    public void createUserWithMetadataTest() throws ApiException, ParseException {
        User u1 = util.users.createUser(util.createUser(util.getTestMetadata()));
        User fu = util.users.getUser(u1.getKey());

        Assert.assertEquals(u1, fu);
        Assert.assertTrue(util.assertMetadataEqual(fu.getMetadata(), util.getTestMetadata()));
        Assert.assertTrue(util.assertMetadataEqual(u1.getMetadata(), fu.getMetadata()));
    }

    /**
     * Update a User with Metadata
     *
     * 
     *
     * @throws ApiException   if the Api call fails
     * @throws ParseException
     */
    @Test
    public void updateUserWithMetadataTest() throws ApiException, ParseException {
        User u1 = util.users.createUser(util.createUser(util.getTestMetadata()));

        UpdateUserRequest uur = new UpdateUserRequest();
        uur.setMetadata(util.updatedTestMetadata());
        User updated = util.users.updateUser(u1.getKey(), uur);

        Assert.assertTrue(util.assertMetadataEqual(updated.getMetadata(), util.updatedTestMetadata()));
    }

    /**
     * Null Out Metadata
     *
     * 
     *
     * @throws ApiException   if the Api call fails
     * @throws ParseException
     */
    @Test
    public void nullOutMetadataTest() throws ApiException, ParseException {
        User u1 = util.users.createUser(util.createUser(util.getTestMetadata()));

        UpdateUserRequest uur = new UpdateUserRequest();
        uur.putMetadataItem("department", null);
        uur.putMetadataItem("quotaCarrying", null);
        User updated = util.users.updateUser(u1.getKey(), uur);
        Assert.assertTrue(updated.getMetadata().keySet().size() == 3);

        UpdateUserRequest uur2 = new UpdateUserRequest();
        uur2.putMetadataItem("targetRate", null);
        uur2.putMetadataItem("level", null);
        uur2.putMetadataItem("startDate", null);
        User updated2 = util.users.updateUser(u1.getKey(), uur2);
        Assert.assertNull(updated2.getMetadata());
    }

    /**
     * Find a User
     *
     *
     *
     * @throws ApiException   if the Api call fails
     * @throws ParseException
     */
    @Test
    public void findUserTest() throws ApiException, ParseException {
        Map<String, Object> m = new HashMap<>();
        m = util.getTestMetadata();
        User u1 = util.users.createUser(util.createUser(m));
        
        m.put("quotaCarrying", false);
        util.users.createUser(util.createUser(m));
        util.users.createUser(util.createUser());

        Map<String, Object> prop = new HashMap<>();
        prop.put("prop", "department");
        prop.put("op", "starts with");
        prop.put("value", "sal");

        Map<String, Object> b = new HashMap<>();
        b.put("bool", "and");
        
        Map<String, Object> paren = new HashMap<>();
        paren.put("parens", "(");
        
        Map<String, Object> prop2 = new HashMap<>();
        prop2.put("prop", "targetRate");
        prop2.put("op", ">=");
        prop2.put("value", 4.22);

        Map<String, Object> prop3 = new HashMap<>();
        prop3.put("prop", "quotaCarrying");
        prop3.put("op", "=");
        prop3.put("value", true);

        Map<String, Object> closeParen = new HashMap<>();
        closeParen.put("parens", ")");

        List<Map<String, Object>> q = new ArrayList<Map<String, Object>>(Arrays.asList(
            prop, b, paren, prop2, b, prop3, closeParen
        ));
        
        FindUsersRequest findUsersRequest = new FindUsersRequest();
        findUsersRequest.setQuery(q);
        List<User> response = util.users.findUser(findUsersRequest);

        Assert.assertTrue(response.size() == 1);
        Assert.assertEquals(response.get(0), u1);
    }
}
